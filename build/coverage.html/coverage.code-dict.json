{"/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/test.js":"/* istanbul instrument in package npmtest_webkit_devtools_agent */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/lib.npmtest_webkit_devtools_agent.js":"/* istanbul instrument in package npmtest_webkit_devtools_agent */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webkit_devtools_agent = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webkit_devtools_agent = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webkit-devtools-agent && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webkit_devtools_agent */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webkit_devtools_agent\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webkit_devtools_agent.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webkit_devtools_agent.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webkit_devtools_agent.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webkit_devtools_agent.__dirname + '/lib.npmtest_webkit_devtools_agent.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/index.js":"var agents = require('./lib');\nvar spawn = require('child_process').spawn;\nvar WebSocketServer = require('ws').Server;\n\n/**\n * DevToolsAgent\n * @constructor\n **/\nvar DevToolsAgent = function () {\n    this.loadedAgents = {};\n    this.proxy = null;\n    this.server = null;\n    this.socket = null;\n};\n\n(function () {\n    /**\n     * Spawns a new process with a websockets service proxy\n     * to serve devtools front-end requests.\n     *\n     * All the messages but debugging messages\n     * are sent to the main process. Debugger Agent lives in this proxy.\n     *\n     * @api private\n     **/\n    this.spawnProxy = function () {\n        var self = this;\n\n        //Parent PID for the proxy to know to whom to send the SIGUSR1 signal\n        process.env.PARENT_PID = process.pid;\n\n        this.proxy = spawn('node', [__dirname + '/webkit-devtools-agent.js',\n                            this.port, this.bind_to, this.ipc_port,\n                            this.verbose], process.argv, {\n            env: process.env,\n            cwd: __dirname\n        });\n\n        this.proxy.stderr.setEncoding('utf8');\n        this.proxy.stderr.on('data', function (data) {\n            console.error(data);\n        });\n\n        this.proxy.stdout.setEncoding('utf8');\n        this.proxy.stdout.on('data', function (data) {\n            if (this.verbose) {\n                console.log(data);\n            }\n        });\n    };\n\n    /**\n     * Proxy connection handler\n     *\n     * @param {net.Socket} socket The just opened network socket.\n     * @api private\n     **/\n    this.onProxyConnection = function (socket) {\n        if (this.verbose) {\n            console.log('webkit-devtools-agent: A proxy got connected.');\n            console.log('webkit-devtools-agent: Waiting for commands...');\n        }\n\n        this.socket = socket;\n        this.socket.on('message', this.onProxyData.bind(this));\n        this.socket.on('error', function(error) {\n            console.error(error);\n        });\n    };\n\n    /**\n     * Handler for data events coming from the proxy process.\n     *\n     * @param {String} message A message coming from the proxy process.\n     * @api private\n     **/\n    this.onProxyData = function (message) {\n        var self = this;\n\n        try {\n            data = JSON.parse(message);\n        } catch(e) {\n            console.log(e.stack);\n            return;\n        }\n\n        var id = data.id;\n        var command = data.method.split('.');\n        var domain = this.loadedAgents[command[0]];\n        var method = command[1];\n        var params = data.params;\n\n        if (!domain || !domain[method]) {\n            console.warn('%s is not implemented', data.method);\n            return;\n        }\n\n        domain[method](params, function(result) {\n            var response = {\n                id: id,\n                result: result\n            };\n\n            self.socket.send(JSON.stringify(response));\n        });\n    };\n\n    /**\n     * Notification function in charge of sending events\n     * to the front-end following the protocol specified\n     * at https://developers.google.com/chrome-developer-tools/docs/protocol/1.0\n     *\n     * @param {Object} A notification object that follows devtools protocol 1.0\n     * @api private\n     **/\n    this.notify = function (notification) {\n        if (!this.socket) return;\n        this.socket.send(JSON.stringify(notification));\n    };\n\n    /**\n     * Loads every agent required at the top of this file.\n     * @private\n     **/\n    this.loadAgents = function () {\n        var runtimeAgent = new agents.Runtime(this.notify.bind(this));\n\n        for (var agent in agents) {\n            if (typeof agents[agent] == 'function' && agent != 'Runtime') {\n                this.loadedAgents[agent] = new agents[agent](this.notify.bind(this), runtimeAgent);\n            }\n        }\n        this.loadedAgents.Runtime = runtimeAgent;\n    };\n\n    /**\n     * Starts node-webkit-agent\n     *\n     * @api public\n     **/\n    this.start = function (config) {\n        var self = this;\n        config = config || {}\n        this.port = config.port || 9999;\n        this.bind_to = config.bind_to || 'localhost';\n        this.ipc_port = config.ipc_port || 3333;\n        this.verbose = config.verbose || false;\n\n        if (this.server) {\n            return;\n        }\n\n        this.server = new WebSocketServer({\n            port: this.ipc_port,\n            bind_to: this.bind_to\n        });\n\n        this.server.on('listening', function() {\n            if (this.verbose) {\n                console.log('webkit-devtools-agent: Spawning websocket ' +\n                'service process...');\n            }\n\n            //Spawns webkit devtools proxy / websockets server\n            self.spawnProxy();\n\n            self.loadAgents();\n        });\n\n        this.server.on('connection', this.onProxyConnection.bind(this));\n    };\n\n    /**\n     * Stops node-webkit-agent\n     *\n     * @api public\n     **/\n    this.stop = function () {\n        if (this.socket) {\n            this.socket.close();\n            this.socket = null;\n        }\n\n        if (this.proxy && this.proxy.pid) {\n            if (this.verbose) {\n                console.log('webkit-devtools-agent: Terminating websockets service' +\n                ' with PID: ' + this.proxy.pid + '...');\n            }\n\n            process.kill(this.proxy.pid, 'SIGTERM');\n        }\n\n        if (this.server) {\n            this.server.close();\n            this.server = null;\n\n            if (this.verbose) {\n                console.log('webkit-devtools-agent: stopped');\n            }\n        }\n    };\n}).call(DevToolsAgent.prototype);\n\nmodule.exports = new DevToolsAgent();\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/index.js":"module.exports = {\n    Console     : require('./console'),\n    Profiler    : require('./profiler'),\n    Page        : require('./page'),\n    //FileSystem  : require('./filesystem'),\n    Network     : require('./network'),\n    Runtime     : require('./runtime'),\n    //Timeline    : require('./timeline'),\n    Inspector   : require('./inspector')\n};\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/console.js":"var util = require('util');\n\nfunction ConsoleAgent(notify, runtimeAgent) {\n    var self = this;\n    this.notify = notify;\n    this.runtimeAgent = runtimeAgent;\n    this.enabled = false;\n    this.messages = [];\n\n    ['log', 'warn', 'info', 'error', 'dir'].forEach(function(level) {\n        var ref = console[level];\n        console[level] = function() {\n            ref.apply(this, arguments);\n\n            var message = {\n                method: 'Console.messageAdded',\n                params: {\n                    message: {\n                        text: util.format.apply(this, arguments),\n                        level: level == 'warn' ? 'warning' : level,\n                        source: 'console-api'\n                    }\n                }\n            };\n\n            //TODO make it aware of RemoteObjects so\n            //that the console in the frontend can show us its shinny\n            //dropdown\n            /*if (level == 'dir') {\n                message.params.message.type = level;\n            }*/\n\n            //TODO save messages when this agent is disabled.\n            //self.messages.push(message);\n            notify(message);\n        };\n    });\n}\n\n(function() {\n    this.enable = function(params, sendResult) {\n        for(var i = 0, len = this.messages.length; i < len; i++) {\n            this.notify(this.messages[i]);\n        }\n        sendResult({result: this.enabled});\n    };\n\n    this.disable = function(params, sendResult) {\n        this.enabled = false;\n        sendResult({});\n    };\n\n    this.clearMessages = function(params, sendResult) {\n        this.messages = [];\n        sendResult({});\n    };\n\n    this.setMonitoringXHREnabled = function(params, sendResult) {\n        sendResult({});\n    };\n\n    this.addInspectedHeapObject = function(params, sendResult) {\n        sendResult({});\n    };\n\n}).call(ConsoleAgent.prototype);\n\nmodule.exports = ConsoleAgent;\n\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/profiler.js":"var profiler = require('./v8-profiler');\nvar fs = require('fs');\n\nvar HeapProfileType = 'HEAP';\nvar CPUProfileType  = 'CPU';\n\nfunction ProfilerAgent(notify) {\n    this.notify = notify;\n    this.profiles = {\n        HEAP: {},\n        CPU: {}\n    };\n\n    this.enabled = false;\n    this.isProfilingCPU = false;\n}\n\n(function(){\n    this.enable = function (params, sendResult) {\n        sendResult({result: this.enabled});\n    };\n\n    this.causesRecompilation = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.isSampling = function (params, sendResult) {\n        sendResult({result: this.isProfilingCPU});\n    };\n\n    this.hasHeapProfiler = function (params, sendResult) {\n        sendResult({result: true});\n    };\n\n    this.getProfileHeaders = function (params, sendResult) {\n        var headers = [];\n\n        for (var type in this.profiles) {\n            for (var profileId in this.profiles[type]) {\n                var profile = this.profiles[type][profileId];\n                headers.push({\n                    title: profile.title,\n                    uid: profile.uid,\n                    typeId: type\n                });\n            }\n        }\n\n        sendResult({\n            headers: headers\n        });\n    };\n\n    this.takeHeapSnapshot = function (params, sendResult) {\n        var self = this;\n        var snapshot = profiler.takeSnapshot(function(done, total) {\n            self.notify({\n                method: 'Profiler.reportHeapSnapshotProgress',\n                params:{\n                    done: done,\n                    total: total\n                }\n            });\n        });\n\n        this.profiles[HeapProfileType][snapshot.uid] = snapshot;\n\n        this.notify({\n            method: 'Profiler.addProfileHeader',\n            params: {\n                header: {\n                    title: snapshot.title,\n                    uid: snapshot.uid,\n                    typeId: HeapProfileType\n                }\n            }\n        });\n\n        sendResult({});\n    };\n\n    this.getHeapSnapshot = function (params, sendResult) {\n        var self = this;\n        var snapshot = this.profiles[HeapProfileType][params.uid];\n\n        snapshot.serialize({\n            onData: function (chunk, size) {\n                chunk = chunk + '';\n                self.notify({\n                    method: 'Profiler.addHeapSnapshotChunk',\n                    params: {\n                        uid: snapshot.uid,\n                        chunk: chunk\n                    }\n                });\n            },\n\n            onEnd: function () {\n                self.notify({\n                    method: 'Profiler.finishHeapSnapshot',\n                    params: {uid: snapshot.uid}\n                });\n\n                sendResult({\n                    profile: {\n                        title: snapshot.title,\n                        uid: snapshot.uid,\n                        typeId: HeapProfileType\n                    }\n                });\n            }\n        });\n    };\n\n    this.getCPUProfile = function (params, sendResult) {\n        var self = this;\n        var profile = this.profiles[CPUProfileType][params.uid];\n        profile.typeId = CPUProfileType;\n\n        sendResult({\n            profile: {\n                title: profile.title,\n                uid: profile.uid,\n                typeId: CPUProfileType,\n                head: profile.getTopDownRoot(),\n                bottomUpHead: profile.getBottomUpRoot()\n            }\n        });\n    };\n\n    //Backwards support for v8 versions coming in nodejs 0.6.x and 0.8.x\n    this.getProfile = function (params, sendResult) {\n        if (params.type === HeapProfileType) {\n            this.getHeapSnapshot(params, sendResult);\n        } else if (params.type === CPUProfileType) {\n            this.getCPUProfile(params, sendResult);\n        }\n    };\n\n    this.clearProfiles = function (params, sendResult) {\n        this.profiles.HEAP = {};\n        this.profiles.CPU = {};\n        profiler.deleteAllSnapshots();\n        profiler.deleteAllProfiles();\n    };\n\n    this.start = function (params, sendResult) {\n        /* TODO\n        {   \"method\":\"Console.messageAdded\",\n            \"params\":{\"message\":{\"source\":\"javascript\",\"level\":\"log\",\"text\":\"Profile \\\"Profile 1\" started.\",\"type\":\"log\",\"line\":0,\"url\":\"\",\"repeatCount\":1}}}\n        */\n\n        profiler.startProfiling();\n\n        this.notify({\n            method: 'Profiler.setRecordingProfile',\n            params: {\n                isProfiling: true\n            }\n        });\n\n        sendResult({});\n    };\n\n    this.stop = function (params, sendResult) {\n        var profile = profiler.stopProfiling();\n\n        this.profiles[CPUProfileType][profile.uid] = profile;\n\n        this.notify({\n            method: 'Profiler.addProfileHeader',\n            params: {\n                header: {\n                    title: profile.title,\n                    uid: profile.uid,\n                    typeId: CPUProfileType\n                }\n            }\n        });\n\n        this.notify({\n            method: 'Profiler.setRecordingProfile',\n            params: {\n                isProfiling: false\n            }\n        });\n\n         sendResult({});\n    };\n\n    this.collectGarbage = function (params, sendResult) {\n        if (typeof gc === 'function') {\n            gc();\n        } else {\n            console.warn('ProfilerAgent: ' +\n            'you need to run your nodejs app using --expose_gc ' +\n            'in order to `\"force`\" garbage collection.');\n        }\n        sendResult({});\n    };\n}).call(ProfilerAgent.prototype);\n\nmodule.exports = ProfilerAgent;\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/v8-profiler.js":"var binding = require(\"../build/Release/profiler\");\n\nfunction Snapshot() {}\n\nSnapshot.prototype.compare = function (other) {\n  var my_objects = this.nodeCounts(),\n      their_objects = other.nodeCounts(),\n      diff = {}, i, k, my_val, their_val;\n      all_keys = Object.keys(my_objects).concat(Object.keys(their_objects)); //has dupes, oh well\n  for (i = 0; i < all_keys.length; i++) {\n    k = all_keys[i];\n    my_val = my_objects[k] || 0;\n    their_val = their_objects[k] || 0;\n    diff[k] = their_val - my_val;\n  }\n  return diff;\n};\n\nSnapshot.prototype.hotPath = function () {\n  var path = [], node = this.root, c, i = 0;\n  c = this.children(node);\n  while (c.length > 0 && i < 1000) {\n    node = c[0].to;\n    c = this.children(node);\n    path.push(node);\n    i++;\n  }\n  return path;\n};\n\nSnapshot.prototype.children = function (node) {\n  var i, children = [];\n  for(i = 0; i < node.childrenCount; i++) {\n    children[i] = node.getChild(i);\n  }\n  children.sort(function (a, b){\n    return b.to.retainedSize() - a.to.retainedSize();\n  });\n  return children;\n};\n\nSnapshot.prototype.topDominatorIds = function () {\n  var doms = {}, arr;\n  this.allNodes().forEach(function (node){\n    var dom = node.dominatorNode || { id: \"none\"};\n    if (doms[dom.id]) {\n      doms[dom.id] += 1;\n    }\n    else {\n      doms[dom.id] = 1;\n    }\n  });\n  arr = Object.keys(doms).map(function (d){\n    return {id: d, count: doms[d]};\n  });\n  arr.sort(function (a, b) {\n    return b.count - a.count;\n  });\n  return arr;\n};\n\nSnapshot.prototype.topDominators = function () {\n  var self = this;\n  return this.topDominatorIds().map(function (d){\n    return self.getNodeById(+d.id);\n  });\n};\n\nSnapshot.prototype.allNodes = function () {\n  var n = this.nodesCount, i, nodes = [];\n  for (i = 0; i < n; i++) {\n    nodes[i] = this.getNode(i);\n  }\n  return nodes;\n};\n\nSnapshot.prototype.nodeCounts = function () {\n  var objects = {};\n  this.allNodes().forEach(function (n){\n    if(n.type === \"Object\") {\n      if (objects[n.name]) {\n        objects[n.name] += 1;\n      }\n      else {\n        objects[n.name] = 1;\n      }\n    }\n    else {\n      if (objects[n.type]) {\n        objects[n.type] += 1;\n      }\n      else {\n        objects[n.type] = 1;\n      }\n    }\n  });\n  return objects;\n};\n\n//adapted from WebCore/bindings/v8/ScriptHeapSnapshot.cpp\nSnapshot.prototype.stringify = function () {\n  var root = this.root, i, j, count_i, count_j, node,\n      lowLevels = {}, entries = {}, entry,\n      children = {}, child, edge, result = {};\n  for (i = 0, count_i = root.childrenCount; i < count_i; i++) {\n    node = root.getChild(i).to;\n    if (node.type === 'Hidden') {\n      lowLevels[node.name] = {\n        count: node.instancesCount,\n        size: node.size,\n        type: node.name\n      };\n    }\n    else if (node.instancesCount > 0) {\n      entries[node.name] = {\n        constructorName: node.name,\n        count: node.instancesCount,\n        size: node.size\n      };\n    }\n    // FIXME: the children portion is too slow and bloats the results\n    //*\n    else {\n      entry = {\n        constructorName: node.name\n      };\n      for(j = 0, count_j = node.childrenCount; j < count_j; j++) {\n        edge = node.getChild(j);\n        child = edge.to;\n        entry[child.ptr.toString()] = {\n          constructorName: child.name,\n          count: parseInt(edge.name, 10)\n        };\n      }\n      children[node.ptr.toString()] = entry;\n    }//*/\n  }\n  result.lowlevels = lowLevels;\n  result.entries = entries;\n  result.children = children;\n  return JSON.stringify(result);\n};\n\nfunction CpuProfile() {}\n\nfunction inspectorObjectFor(node) {\n  var i, count, child,\n      result = {\n        functionName: node.functionName,\n        url: node.scriptName,\n        lineNumber: node.lineNumber,\n        totalTime: node.totalTime,\n        selfTime: node.selfTime,\n        numberOfCalls: 0,\n        visible: true,\n        callUID: node.callUid,\n        children: []\n      };\n  for(i = 0, count = node.childrenCount; i < count; i++) {\n    child = node.getChild(i);\n    result.children.push(inspectorObjectFor(child));\n  }\n  return result;\n}\n\nCpuProfile.prototype.getTopDownRoot = function () {\n  return inspectorObjectFor(this.topRoot);\n};\n\nCpuProfile.prototype.getBottomUpRoot = function () {\n  return inspectorObjectFor(this.bottomRoot);\n};\n\nvar heapCache = [];\n\nexports.takeSnapshot = function (name, control) {\n  if (typeof name == 'function') {\n    control = name;\n    name = '';\n  }\n\n  if (!name || !name.length) {\n    name = 'org.nodejs.profiles.heap.user-initiated.' + (heapCache.length + 1);\n  }\n\n  var snapshot = binding.heapProfiler.takeSnapshot (name, control);\n  snapshot.__proto__ = Snapshot.prototype;\n  heapCache.push(snapshot);\n\n  return snapshot;\n};\n\nexports.getSnapshot = function (index) {\n  return heapCache[index];\n};\n\nexports.findSnapshot = function (uid) {\n  return heapCache.filter(function (s) {return s.uid === uid;})[0];\n};\n\nexports.snapshotCount = function () {\n  return heapCache.length;\n};\n\nexports.deleteAllSnapshots = function () {\n\theapCache = [];\n\tbinding.heapProfiler.deleteAllSnapshots();\n};\n\nvar cpuCache = [];\n\nexports.startProfiling = function (name) {\n  if (!name || !name.length) {\n    name = 'org.nodejs.profiles.cpu.user-initiated.' + (cpuCache.length + 1);\n  }\n\n  binding.cpuProfiler.startProfiling(name);\n};\n\nexports.stopProfiling = function (name) {\n  name = name ? name : '';\n  var profile = binding.cpuProfiler.stopProfiling(name);\n  profile.__proto__ = CpuProfile.prototype;\n  cpuCache.push(profile);\n  return profile;\n};\n\nexports.getProfile = function (index) {\n  return cpuCache[index];\n};\n\nexports.findProfile = function (uid) {\n  return cpuCache.filter(function(s) {return s.uid === uid;})[0];\n};\n\nexports.profileCount = function () {\n  return cpuCache.length;\n};\n\nexports.deleteAllProfiles = function () {\n  cpuCache = [];\n  binding.cpuProfiler.deleteAllProfiles();\n};\n\nprocess.profiler = exports;\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/webkit-devtools-agent.js":"#!/usr/bin/env node\n//var Debugger = require('./lib/debugger');\nvar WebSocket = require('ws');\nvar WebSocketServer = WebSocket.Server;\n\nvar DevToolsAgentProxy = module.exports = function () {\n    this.wss = null;\n    this.backend = null;\n    this.frontend = null;\n    this.debuggerAgent = null;\n    this.port = process.argv[2] || 9999;\n    this.bind_to = process.argv[3] || '0.0.0.0';\n    this.ipc_port = process.argv[4] || 3333;\n    this.verbose = process.argv[5] || false;\n};\n\n(function () {\n    process.on('uncaughtException', function (err) {\n        console.error('webkit-devtools-agent: Websockets service uncaught exception: ');\n        console.error(err.stack);\n    });\n\n    this.onFrontendMessage = function (message) {\n        var self = this;\n        var data;\n        try {\n            data = JSON.parse(message);\n        } catch(e) {\n            console.log(e.stack);\n        }\n        var command = data.method.split('.');\n        var domainName = command[0];\n\n        if (domainName !== 'Debugger') {\n            this.backend.send(message);\n            return;\n        }\n\n        var id = data.id;\n        var method = command[1];\n        var params = data.params;\n\n        /*if (!this.debuggerAgent[method]) {\n            console.warn('%s is not implemented', data.method);\n            return;\n        }\n\n        this.debuggerAgent[method](params, function(result) {\n            var response = {\n                id: id,\n                result: result\n            };\n            self.frontend.send(JSON.stringify(response));\n        });*/\n    };\n\n    this.onFrontendConnection = function(socket) {\n        var self = this;\n        this.frontend = socket;\n\n        this.frontend.on('message', this.onFrontendMessage.bind(this));\n        \n        this.frontend.on('close', (function(){ this.frontend = null;}).bind(this));\n\n        if (this.verbose) {\n            console.log('webkit-devtools-agent: new frontend connection!');\n        }\n\n        //this.debuggerAgent = new Debugger(process.env.PARENT_PID);\n\n        /*this.debuggerAgent.initialize(function(notification) {\n            self.frontend.send(JSON.stringify(notification));\n        });*/\n    };\n\n    /**\n     * Callback function invoked once\n     * a connection has been established\n     * with the backend process. It also\n     * initializes the websocket service\n     * for DevTools frontend to connect with.\n     *\n     * @api private\n     */\n    this.onBackendOpen = function () {\n        //Starts websockets server for DevTools frontend\n        this.wss = new WebSocketServer({\n            port: this.port,\n            host: this.bind_to\n        });\n\n        if (this.verbose) {\n            console.log('webkit-devtools-agent: Websockets ' +\n            'service started on %s:%s', this.bind_to, this.port);\n        }\n\n        this.wss.on('connection', this.onFrontendConnection.bind(this));\n    };\n\n    /**\n     * Callback function that forwards agent responses\n     * to DevTools frontend except for the Debugger\n     * agent which lives in the current process.\n     *\n     * @param {String} message JSON message as it comes from\n     * the main process.\n     * @api private\n     */\n    this.onBackendMessage = function (message) {\n        if (!this.frontend) {\n            return;\n        }\n\n        this.frontend.send(message);\n    };\n\n    /**\n     * Starts proxy process.\n     * This process is in charge of receiving\n     * messages from DevTools frontend and forward them\n     * to the main process.\n     *\n     * DebuggerAgent is an exception to the rule of having\n     * all the agents in the main process. Given\n     * that the main process is going to be in debug mode\n     * we need the DebuggerAgent to live in a different process\n     * so that it can continue working and be responsive\n     * with DevTools frontend.\n     *\n     * @api public\n     **/\n    this.start = function () {\n        this.backend = new WebSocket('ws://localhost:' + this.ipc_port);\n        this.backend.on('open', this.onBackendOpen.bind(this));\n        this.backend.on('message', this.onBackendMessage.bind(this));\n    };\n\n    /**\n     * Stops proxy process\n     *\n     * @api public\n     **/\n    this.stop = function () {\n        if (this.wss) {\n            this.wss.close();\n            this.wss = null;\n            if (this.verbose) {\n                console.log('webkit-devtools-agent: Websockets service with PID ' +\n                process.pid + ' has stopped');\n            }\n        }\n    };\n}).call(DevToolsAgentProxy.prototype);\n\nvar proxy = new DevToolsAgentProxy();\nproxy.start();\n\n['exit', 'SIGTERM', 'SIGHUP'].forEach(function (s) {\n    process.on(s, function() {\n        proxy.stop();\n    });\n});\n\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/helpers.js":"var underscore = require('underscore');\n\nvar helpers = underscore;\nmodule.exports = helpers;\n\nvar primitiveTypes = {\n    undefined: true,\n    boolean: true,\n    number: true,\n    string: true\n};\n\nvar isPrimitiveValue = function(object) {\n    return primitiveTypes[typeof object];\n};\n\nhelpers.mixin({ isPrimitiveValue: isPrimitiveValue });\n\nvar subtype = function(obj) {\n    if (obj === null) return \"null\";\n\n    var type = typeof obj;\n    if (helpers.isPrimitiveValue(obj)) return null;\n\n    if (helpers.isArray(obj)) return \"array\";\n    if (helpers.isRegExp(obj)) return \"regexp\";\n    if (helpers.isDate(obj)) return \"date\";\n\n    // FireBug's array detection.\n    try {\n        if (Object.prototype.toString.call(obj) === \"[object Arguments]\" &&\n            isFinite(obj.length)) {\n            return \"array\";\n        }\n    } catch (e) {\n    }\n  return null;\n};\n\nhelpers.mixin({ subtype: subtype });\n\nvar describe = function(obj) {\n    if (helpers.isPrimitiveValue(obj)) return null;\n\n    var subtype = helpers.subtype(obj);\n\n    if (subtype === \"regexp\") return '' + obj;\n    if (subtype === \"date\") return '' + obj;\n\n    if (subtype === \"array\") {\n        var className = 'array ';\n        if (typeof obj.length === \"number\")\n            className += \"[\" + obj.length + \"]\";\n        return className;\n    }\n\n    if (typeof obj === \"function\") return \"\" + obj;\n\n    if (helpers.isObject(obj)) {\n        // In Chromium DOM wrapper prototypes will have Object as their constructor name,\n        // get the real DOM wrapper name from the constructor property.\n        var constructorName = obj.constructor && obj.constructor.name;\n        if (constructorName)\n            return constructorName;\n    }\n    return '' + obj;\n};\n\nvar decycle = function(object, recursive) {\n'use strict';\n\n//Taken from https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n\n// Make a deep copy of an object or array, assuring that there is at most\n// one instance of each object or array in the resulting structure. The\n// duplicate references (which might be forming cycles) are replaced with\n// an object of the form\n//      {$ref: PATH}\n// where the PATH is a JSONPath string that locates the first occurance.\n// So,\n//      var a = [];\n//      a[0] = a;\n//      return JSON.stringify(JSON.decycle(a));\n// produces the string '[{\"$ref\":\"$\"}]'.\n\n// JSONPath is used to locate the unique object. $ indicates the top level of\n// the object or array. [NUMBER] or [STRING] indicates a child member or\n// property.\n\n    var objects = [],   // Keep a reference to each unique object or array\n        paths = [];     // Keep the path to each unique object or array\n\n    return (function derez(value, path, deep) {\n\n// The derez recurses through the object, producing the deep copy.\n\n    var i,          // The loop counter\n        name,       // Property name\n        nu;         // The new object or array\n\n    switch (typeof value) {\n        case 'object':\n\n// typeof null === 'object', so get out if this value is not really an object.\n\n            if (!value) {\n                return null;\n            }\n\n// If the value is an object or array, look to see if we have already\n// encountered it. If so, return a $ref/path object. This is a hard way,\n// linear search that will get slower as the number of unique objects grows.\n\n            for (i = 0; i < objects.length; i += 1) {\n                if (objects[i] === value) {\n                    return {$ref: paths[i]};\n                }\n            }\n\n// Otherwise, accumulate the unique value and its path.\n\n            objects.push(value);\n            paths.push(path);\n\n// If it is an array, replicate the array.\n\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n              nu = [];\n                if (deep !== undefined){\n                  deep++;\n                }\n                if (deep === undefined || deep < 2) {\n                  for (i = 0; i < value.length; i += 1) {\n                    try {\n                      typeof value[i]\n                    } catch (err) {\n                      continue;\n                    }\n                    nu[i] = derez(value[i], path + '[' + i + ']',deep);\n                  }\n                }\n            } else {\n\n// If it is an object, replicate the object.\n\n                nu = {};\n                if (deep !== undefined){\n                  deep++;\n                }\n\n                if (deep === undefined || deep < 2) {\n                  for (name in value) {\n                    try {\n                      typeof value[name]\n                    } catch (err) {\n                      continue;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(value, name)) {\n                      nu[name] = derez(value[name],\n                          path + '[' + JSON.stringify(name) + ']',deep);\n                    }\n                  }\n                }\n            }\n            return nu;\n            case 'number':\n            case 'string':\n            case 'boolean':\n                return value;\n            }\n        }(object, '$', ((recursive == false) ? 0 : undefined)));\n};\n\nhelpers.mixin({ decycle: decycle });\nhelpers.mixin({ describe: describe });\n\n\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/inspector.js":"function InspectorAgent() {\n    this.enabled = false;\n}\n\n(function () {\n    this.enable = function (params, sendResult) {\n        sendResult({result: this.enabled});\n    };\n}).call(InspectorAgent.prototype);\n\nmodule.exports = InspectorAgent;\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/network.js":"","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/page.js":"function PageAgent() {\n    this.enabled = false;\n}\n\n(function () {\n    this.enable = function (params, sendResult) {\n        sendResult({result: this.enabled});\n    };\n\n    this.canOverrideDeviceMetrics = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.canShowDebugBorders = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.canShowFPSCounter = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.canContinuouslyPaint = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.canOverrideGeolocation = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.canOverrideDeviceOrientation = function (params, sendResult) {\n        sendResult({result: false});\n    };\n\n    this.setTouchEmulationEnabled = function (params, sendResult) {\n        sendResult({result: false});\n    };\n}).call(PageAgent.prototype);\n\nmodule.exports = PageAgent;\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/runtime.js":"var helpers = require('./helpers');\n\n//Code was based on /WebKit/Source/WebCore/inspector/InjectedScriptSource.js\nvar _objectId = 0;\nvar RemoteObject = function (object, forceValueType) {\n    this.type = typeof object;\n\n    if (helpers.isPrimitiveValue(object) ||\n        object === null || forceValueType) {\n        // We don't send undefined values over JSON.\n        if (typeof object !== \"undefined\") {\n            this.value = object;\n        }\n\n        // Null object is object with 'null' subtype'\n        if (object === null) {\n            this.subtype = \"null\";\n        }\n\n        // Provide user-friendly number values.\n        if (typeof object === \"number\") {\n            this.description = object + \"\";\n        }\n        return;\n    }\n\n    this.objectId = JSON.stringify({ injectedScriptId: 0, id: _objectId++});\n    var subtype = helpers.subtype(object);\n    if (subtype) {\n        this.subtype = subtype;\n    }\n    this.className = object.constructor || object.name || '';\n    this.description = helpers.describe(object);\n    this.value = helpers.decycle(object,false);\n};\n\nvar getPropertyDescriptors = function (object, ownProperties) {\n    var descriptors = [];\n    var nameProcessed = {};\n    nameProcessed.__proto__ = null;\n\n    for (var o = object; helpers.isObject(o); o = o.__proto__) {\n        var names = Object.getOwnPropertyNames(o);\n        for (var i = 0; i < names.length; ++i) {\n            var name = names[i];\n            if (nameProcessed[name]) {\n                continue;\n            }\n\n            var descriptor = {};\n            try {\n                nameProcessed[name] = true;\n                descriptor = Object.getOwnPropertyDescriptor(object, name);\n                if (!descriptor) {\n                    try {\n                        descriptors.push({\n                            name: name,\n                            value: object[name],\n                            writable: false,\n                            configurable: false,\n                            enumerable: false\n                        });\n                    } catch (e) {\n                        // Silent catch.\n                    }\n                    continue;\n                }\n            } catch (e) {\n                descriptor = {};\n                descriptor.value = e;\n                descriptor.wasThrown = true;\n            }\n\n            descriptor.name = name;\n            descriptors.push(descriptor);\n        }\n\n        if (ownProperties) {\n            if (object.__proto__) {\n                descriptors.push({\n                    name: \"__proto__\",\n                    value: object.__proto__,\n                    writable: true,\n                    configurable: true,\n                    enumerable: false\n                });\n            }\n            break;\n        }\n    }\n    return descriptors;\n};\n\nfunction RuntimeAgent() {\n    this.objects = {};\n}\n\n(function() {\n    this.evaluate = function (params, sendResult) {\n        var result = null;\n        try {\n            result = eval.call(global, \"with ({}) {\\n\" + params.expression + \"\\n}\");\n        } catch (e) {\n            return sendResult(this.createThrownValue(e, params.objectGroup));\n        }\n\n        sendResult({\n            result: this.wrapObject(result, params.objectGroup),\n            wasThrown: false\n        });\n    };\n\n    this.getProperties = function (params, sendResult) {\n        var object = this.objects[params.objectId];\n\n        if (helpers.isUndefined(object)) {\n            console.error('RuntimeAgent.getProperties: Unknown object');\n            return;\n        }\n\n        object = object.value;\n\n        var descriptors = getPropertyDescriptors(object, params.ownProperties);\n        var len = descriptors.length;\n\n        if (len === 0 &&\n            \"arguments\" in object) {\n            for (var key in object) {\n                descriptors.push({\n                    name: key,\n                    value: object[key],\n                    writable: false,\n                    configurable: false,\n                    enumerable: true\n                });\n            }\n        }\n\n        for (var i = 0; i < len; ++i) {\n            var descriptor = descriptors[i];\n            if (\"get\" in descriptor) {\n                descriptor.get = this.wrapObject(descriptor.get);\n            }\n\n            if (\"set\" in descriptor) {\n                descriptor.set = this.wrapObject(descriptor.set);\n            }\n\n            if (\"value\" in descriptor) {\n                descriptor.value = this.wrapObject(descriptor.value);\n            }\n\n            if (!(\"configurable\" in descriptor)) {\n                descriptor.configurable = false;\n            }\n\n            if (!(\"enumerable\" in descriptor)) {\n                descriptor.enumerable = false;\n            }\n        }\n\n        sendResult({\n            result: descriptors\n        });\n    };\n\n    this.wrapObject = function (object, objectGroup, forceValueType) {\n        var remoteObject;\n\n        try {\n            remoteObject = new RemoteObject(object, forceValueType);\n        } catch (e) {\n            var description = \"<failed to convert exception to string>\";\n            try {\n                description = helpers.describe(e);\n            } catch (ex) {}\n            remoteObject = new RemoteObject(description, forceValueType);\n        }\n\n        this.objects[remoteObject.objectId] = {\n            objectGroup: objectGroup,\n            value: object\n        };\n        return remoteObject;\n    };\n\n    this.createThrownValue = function (value, objectGroup) {\n        var remoteObject = this.wrapObject(value, objectGroup);\n        try {\n            remoteObject.description = '' + value;\n        } catch (e) {}\n\n        return {\n            wasThrown: true,\n            result: remoteObject\n        };\n    };\n\n    this.callFunctionOn = function (params, sendResult) {\n        var object = this.objects[params.objectId];\n\n        if (helpers.isUndefined(object)) {\n            console.error('RuntimeAgent.callFunctionOn: Unknown object');\n            return;\n        }\n\n        object = object.value;\n        var resolvedArgs = [];\n\n        var args = params.arguments;\n\n        if (args) {\n            for (var i = 0; i < args.length; ++i) {\n                var objectId = args[i].objectId;\n                if (objectId) {\n                    var resolvedArg = this.objects[objectId];\n                    if (!resolvedArg) {\n                        console.error('RuntimeAgent.callFunctionOn: Unknown object');\n                        return;\n                    }\n\n                    resolvedArgs.push(resolvedArg.value);\n                } else if (\"value\" in args[i]) {\n                    resolvedArgs.push(args[i].value);\n                } else {\n                    resolvedArgs.push(undefined);\n                }\n            }\n        }\n\n        var objectGroup = this.objects[params.objectId].objectGroup;\n        try {\n            var func = eval.call(global, (\"(\" + params.functionDeclaration + \")\"));\n            if (typeof func !== \"function\") {\n                console.error('RuntimeAgent.callFunctionOn: Expression does ' +\n                'not evaluate to a function');\n                return;\n            }\n\n            return sendResult({\n                    result:  this.wrapObject(func.apply(object, resolvedArgs), objectGroup, params.returnByValue),\n                    wasThrown: false\n            });\n        } catch (e) {\n            return sendResult(this.createThrownValue(e, objectGroup));\n        }\n    };\n\n    this.releaseObjectGroup = function (params, sendResult) {\n        for (var key in this.objects) {\n            var value = this.objects[key];\n            if (value.objectGroup === params.objectGroup) {\n                delete this.objects[key];\n            }\n        }\n        sendResult({});\n    };\n\n    this.releaseObject = function (params, sendResult) {\n        delete this.objects[params.objectId];\n        sendResult({});\n    };\n}).call(RuntimeAgent.prototype);\n\nmodule.exports = RuntimeAgent;\n\n\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/timeline.js":"var probes = require('./probes');\n\nfunction TimelineAgent(sendEvent, runtimeAgent) {\n    this.sendEvent = sendEvent;\n    this.runtimeAgent = runtimeAgent;\n    this.enabled = false;\n    this.maxCallStackDepth = 5;\n    this.includeMemoryDetails = true;\n}\n\n(function() {\n    this.enable = function (params, sendResult) {\n        this.enabled = true;\n        sendResult({result: this.enabled});\n        probes.start();\n    };\n\n    this.disable = function (params, sendResult) {\n        this.enabled = false;\n        probes.stop();\n        sendResult({result: this.enabled});\n    };\n\n    this.timeStamp = function (params, sendResult, sendEvent) {\n        var memory = process.memoryUsage();\n        sendEvent({\n            method: 'Timeline.eventRecorded',\n            params: {\n                record: {\n                    startTime: Date.now(),\n                    endTime: Date.now(),\n                    data: { 'message': message || '' },\n                    type: 'TimeStamp',\n                    usedHeapSize: memory.heapUsed,\n                    totalHeapSize: memory.heapTotal\n                }\n            }\n        });\n    };\n\n    this.start = function (params, sendResult) {\n        this.maxCallStackDepth = params.maxCallStackDepth || 5;\n        sendResult({});\n    };\n\n    this.stop = function (params, sendResult) {\n        sendResult({});\n    };\n\n    this.setIncludeMemoryDetails = function (params, sendResult) {\n        this.includeMemoryDetails = params.enabled || true;\n        sendResult({});\n    };\n}).call(TimelineAgent.prototype);\n\nmodule.exports = TimelineAgent;\n\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/debugger/debugger-client.js":"/**\n * Module dependencies.\n */\nvar net = require('net');\nvar util = require('util');\nvar translator = require('./translator');\nvar V8Protocol = require('_debugger').Protocol;\n\n/**\n * DebuggerClient\n * This file implements http://code.google.com/p/v8/wiki/DebuggerProtocol\n * along with the `translator` object\n *\n * @param {Function} notify Notification function to send events\n * straight to DevTools frontend.\n * @constructor\n */\n\nvar DebuggerClient = module.exports = function(notify) {\n    this.connection = null;\n    this.connected = false;\n    this.reqSequence = 0;\n    this.requests = {};\n    this.notify = notify;\n    this.queue = [];\n    this.port = 5858;\n    this.protocol = null;\n};\n\n(function() {\n    /**\n     * Callback function that gets invoked once\n     * a connection to the debuggee process is established.\n     *\n     * @api private\n     */\n    this.onConnect = function() {\n        this.connected = true;\n        this.flushQueue();\n    };\n\n    /**\n     * This callback function gets invoked by\n     * nodejs v8 protocol implementation\n     * once it receives the entire response\n     * from v8 debug agent.\n     *\n     * @param {Object} response The response serialized\n     * by the nodejs implementation of the v8 remote debugger protocol.\n     * @api private\n     */\n    this.onV8Response = function(response) {\n        var payload = response.body;\n        //console.log(payload);\n\n        if (payload.type == 'event') {\n            if (!translator[payload.event]) {\n                console.warn('webkit-devtools-agent: Translator function ' +\n                ' not found for event: ' + payload.event);\n                return;\n            }\n\n            this.notify(translator[payload.event](payload));\n        } else if (payload.type == 'response') {\n            var callback = this.requests[payload.request_seq];\n            if (callback) {\n                callback(translator[payload.command](payload));\n\n                delete this.requests[payload.request_seq];\n            } else {\n                console.warn('webkit-devtools-agent: Unexpected '+\n                'message was received, there is no callback function '+\n                ' to handle it :( :');\n                console.warn(payload);\n            }\n        } else {\n            console.warn('webkit-devtools-agent: Unrecognized ' +\n            'message type received by DebuggerAgent: ');\n            console.warn(payload);\n        }\n    };\n    /**\n     * Callback function to received debug data coming out of\n     * the debugee process.\n     *\n     * @param {Buffer} data Data sent by v8 debug agent\n     * @api private\n     */\n\n    this.onData = function(data) {\n        this.protocol.execute(data);\n    };\n\n    /**\n     * Callback function for `close` events in the\n     * connection to the debugee process.\n     *\n     * @api private\n     */\n    this.onClose = function() {\n        this.connected = false;\n        this.connection = null;\n    };\n\n    /**\n     * Callback function for `error` events in the\n     * connection to the debuggee process.\n     *\n     * @param {Buffer} error JSON containing the error.\n     * @api private\n     */\n    this.onError = function(error) {\n        console.error(error);\n    };\n\n    /**\n     * Flushes the internal queue, sending\n     * all the queued messages if\n     * there is a valid connection to the\n     * debugee process.\n     *\n     * @api private\n     */\n    this.flushQueue = function() {\n        if (!this.connected) {\n            return;\n        }\n\n        var queue = this.queue;\n        for (var i = 0, len = queue.length; i < len; i++) {\n            var message = JSON.stringify(queue[i]);\n\n            this.connection.write('Content-Length: ' +\n                message.length + '\\r\\n\\r\\n' + message)\n\n            //removes message from the queue\n            queue.splice(i, 1);\n        }\n    };\n\n    /**\n     * Sends out message to the debugee process\n     * through an internal queue.\n     *\n     * @param {Object} data Object to be sent\n     * @param {Function} callback Callback function\n     * to invoke once the debug agent, in the debugee process,\n     * get back to us with a response.\n     *\n     * @api public\n     */\n    this.send = function(data, callback) {\n        this.reqSequence++;\n        data.seq = this.reqSequence;\n\n        /**\n         * Once the response comes back, the\n         * `callback` function is going to be invoked and\n         * removed from the list of pending response handlers.\n         */\n        this.requests[data.seq] = callback;\n\n        /**\n         * This queue avoids some race conditions,\n         * especially in the devtools front-end\n         * initialization.\n         */\n        this.queue.push(data);\n\n        //Flushes only if this.connected is true\n        this.flushQueue();\n\n        if (this.queue.length > 50) {\n            console.warn('webkit-devtools-agent: Debugger client ' +\n            'queue is too big. It could mean that the client was unable ' +\n            'to establish a connection with the v8 debug agent. ' +\n            'Restart the agent and start your debugging session again.');\n        }\n    };\n\n    /**\n     * Establishes a connection to the\n     * Debug Agent of the debuggee process and\n     * sets up the callbacks to some events.\n     *\n     * @param {Function} callback Callback function\n     * @api public\n     */\n    this.connect = function(callback) {\n        this.protocol = new V8Protocol();\n        this.protocol.onResponse = this.onV8Response.bind(this);\n\n        this.connection = net.connect(this.port);\n        this.connection.setEncoding('utf8');\n\n        this.connection.on('connect', this.onConnect.bind(this));\n        this.connection.on('data', this.onData.bind(this));\n        this.connection.on('close', this.onClose.bind(this));\n        this.connection.on('error', this.onError.bind(this));\n\n        callback(translator.emptyResult());\n    };\n\n    /**\n     * Disconnects from the debuggee process\n     *\n     * @param {Function} callback Callback function\n     * @api public\n     */\n    this.disconnect = function(callback) {\n        this.connection.end();\n        callback();\n    };\n\n    /**\n     * Defines pause on exceptions state.\n     * Can be set to stop on `all` exceptions,\n     * `uncaught` exceptions or no exceptions.\n     * Initial pause on exceptions state is none.\n     *\n     * Gotcha: V8 remote debugger protocol doesn't understand `none` as\n     * break type, so we need to send `uncaught` and `enabled` equaling false\n     * to represent `none`.\n     *\n     * @param {String} exceptionBreak Type of exception break\n     * it can be `all` or `uncaught`.\n     * @param {Function} callback Callback function to send back\n     * the answer to this command. The response is returned\n     * in the DevTools Remote Protocol format specified in:\n     *  https://developers.google.com/chrome-developer-tools/docs/protocol/1.0/debugger#command-setPauseOnExceptions\n     * @api public\n     */\n    this.setExceptionBreak = function(exceptionBreak, callback) {\n        var request = {\n            type: 'request',\n            command: 'setexceptionbreak',\n            arguments: {\n                type: exceptionBreak === 'none' ? 'uncaught': exceptionBreak,\n                enabled: exceptionBreak == 'none' ? false : true\n            }\n        };\n\n        this.send(request, callback);\n    };\n\n    this.getScripts = function() {\n        var self = this;\n        var request = {\n            type: 'request',\n            command: 'scripts',\n            arguments: {\n                types: 4, //normal scripts\n                includeSource: true\n            }\n        };\n\n        this.send(request, function(scripts) {\n            for (var i = 0, len = scripts.length; i < len; i++) {\n                self.notify(scripts[i]);\n            }\n        });\n    };\n}).call(DebuggerClient.prototype);\n\n","/home/travis/build/npmtest/node-npmtest-webkit-devtools-agent/node_modules/webkit-devtools-agent/lib/debugger/translator.js":"/**\n * @fileoverview \n * Transforms http://code.google.com/p/v8/wiki/DebuggerProtocol\n * to https://developers.google.com/chrome-developer-tools/docs/protocol/1.0\n **/\n\n/*var formatScript = function(script) {\n    var lineEnds = script.line_ends;\n    var lineCount = lineEnds.length;\n    var endLine = script.line_offset + lineCount - 1;\n    var endColumn;\n    // V8 will not count last line if script source ends with \\n.\n    if (script.source[script.source.length - 1] === '\\n') {\n        endLine += 1;\n        endColumn = 0;\n    } else {\n        if (lineCount === 1)\n            endColumn = script.source.length + script.column_offset;\n        else\n            endColumn = script.source.length - (lineEnds[lineCount - 2] + 1);\n    }\n\n    return {\n        id: script.id,\n        name: script.nameOrSourceURL(),\n        source: script.source,\n        startLine: script.line_offset,\n        startColumn: script.column_offset,\n        endLine: endLine,\n        endColumn: endColumn,\n        isContentScript: !!script.context_data && script.context_data.indexOf(\"injected\") == 0\n    };\n};*/\n\nvar formatScript = function(script) {\n    var endLine = script.lineOffset + script.lineCount - 1;\n    var endColumn = 0;\n\n    // V8 will not count last line if script source ends with \\n.\n    if (script.source[script.sourceLength - 1] === '\\n') {\n        endLine += 1;\n    } else {\n        if (script.lineCount === 1) {\n            endColumn = script.sourceLength + script.columnOffset;\n        } else {\n            endColumn = script.sourceLength - (script.source[script.lineCount - 2].length);\n        }\n    }\n\n    return {\n        scriptId: script.id.toString(),\n        url: script.name,\n        startLine: script.lineOffset,\n        startColumn: script.columnOffset,\n        endLine: endLine,\n        endColumn: endColumn,\n        isContentScript: false\n    };\n};\n\nmodule.exports = {\n    emptyResult: function() {\n        var devtoolsFormat = {};\n        return devtoolsFormat;\n    },\n\n    afterCompile: function(eventData) {\n        return {\n            method: 'Debugger.afterCompile',\n            params:{}\n        };\n    },\n\n    scripts: function(response) {\n        var scripts = [];\n        var scripts_ = response.body;\n\n        for (var i = 0, len = scripts_.length; i < len; i++) {\n            var script = scripts_[i];\n\n            scripts.push({\n                method: 'Debugger.scriptParsed',\n                params: formatScript(script)\n            });\n        }\n\n        return scripts;\n    },\n\n    /**\n     * Naming exceptions in order to translate the v8 protocol\n     * dynamicaly, based on the field `command` of\n     */\n    setexceptionbreak: function(response) {\n        return {};\n    },\n\n    scriptCollected: function(script) {\n        console.log(script);\n    }\n};\n"}